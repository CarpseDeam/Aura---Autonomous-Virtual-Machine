Task: {{ request }}
Project: {{ project_name or "Unknown" }}
Task ID: {{ task_id }}
Generated: {{ generated_at }}

## Core Mission
{{ mission_summary }}

## Reality-First Code Generation Protocol (MANDATORY)
1. Discovery -> run LIST_FILES to inspect directories you'll touch.
2. Deep Inspection -> READ_FILE every module you plan to import or edit.
3. Contract Verification -> READ_FILE DTOs/schemas to mirror names, optionality, and types.
4. Dependency Mapping -> READ_FILE constructors/methods to confirm signatures before wiring calls.
5. Code Generation -> only after finishing steps 1-4 may you write code. Iterate: inspect -> draft one change -> verify -> continue.

Failing to complete these steps before writing code is a protocol violation.

## Workspace Snapshot
{% if project_files %}
- Existing files ({{ project_files|length }}):
{% for file_path in project_files %}
  - {{ file_path }}
{% endfor %}
{% else %}
- No existing files detected in the project directory.
{% endif %}

## Planned Deliverables
{% for file in planned_files %}
### {{ file.file_path }}
- Purpose: {{ file.description or "No description provided." }}
- Notes:
{% if file.methods %}
  - Methods to implement:
  {% for method in file.methods %}
    - {{ method }}
  {% endfor %}
{% endif %}
{% if file.classes %}
  - Classes to provide:
  {% for cls in file.classes %}
    - {{ cls }}
  {% endfor %}
{% endif %}
{% if file.extra %}
  - Additional guidance:
  {% for note in file.extra %}
    - {{ note }}
  {% endfor %}
{% endif %}
{% if not file.methods and not file.classes and not file.extra %}
  - No further detail available.
{% endif %}
{% endfor %}
{% if not planned_files %}
- No specific files were outlined; confirm scope with Aura before proceeding.
{% endif %}

## Quality Expectations
- Production-ready, type-hinted Python.
- Follow project conventions and Single Responsibility Principle.
- Use Pydantic models for data contracts when applicable.
- Add tests for new services or behaviours you introduce.

## Handoff Instructions
1. Read this specification fully.
2. Complete the Reality-First protocol before generating code.
3. Commit results by writing files directly into the workspace.
4. Notify completion via terminal output so Aura can monitor changes.

Aura will monitor the workspace for new or modified files and integrate them into the project memory.
